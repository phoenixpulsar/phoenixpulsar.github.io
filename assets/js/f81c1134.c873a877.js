"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"nft-auction-ownership","metadata":{"permalink":"/blog/nft-auction-ownership","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-12-28-nft-auction-ownership/index.md","source":"@site/blog/2024-12-28-nft-auction-ownership/index.md","title":"How to check ownership of an NFT in an Auction?","description":"In the NEAR tutorial, there is a section about ownership verification. It is just a short section, and on firts pass, it was not clear to me so below find a more detailed explanation.","date":"2024-12-28T00:00:00.000Z","tags":[],"readingTime":5.27,"hasTruncateMarker":false,"authors":[{"name":"Phoenix Pulsar","title":"Technomancer of Code and Connection","url":"https://github.com/phoenixpulsar","page":{"permalink":"/blog/authors/phoenixpulsar"},"socials":{"x":"https://x.com/pulsar_phoenix","github":"https://github.com/phoenixpulsar"},"imageURL":"https://github.com/phoenixpulsar.png","key":"phoenixpulsar"}],"frontMatter":{"slug":"nft-auction-ownership","title":"How to check ownership of an NFT in an Auction?","authors":["phoenixpulsar"]},"unlisted":false,"nextItem":{"title":"Do things live in the blockchain forever?","permalink":"/blog/block-forever"}},"content":"In the NEAR tutorial, there is a section about ownership verification. It is just a short section, and on firts pass, it was not clear to me so below find a more detailed explanation.\\n\\n# 1. Context: An Auction Contract That Sells NFTs\\n\\n## Auction Contract Overview\\n\\n- Typically, an auction contract allows users to bid on some item (in this case, an NFT) over a set period.\\n- At the end of the auction, the highest bidder wins and should receive the NFT.\\n\\n### Implicit Assumption\\n\\n- The auction contract **should** have the right to transfer the NFT from itself to the winning bidder.\\n- This means that, ideally, the auction contract actually owns (or controls) the NFT during the auction.\\n\\n---\\n\\n# 2. The Problem: No On-Chain Check for Ownership\\n\\n## What\u2019s Missing?\\n\\n- In the given scenario, the contract does **not** verify whether it truly owns (or is approved to transfer) the NFT it\u2019s auctioning.\\n- There is no function call or logic that checks \u201cDoes this contract really own NFT X?\u201d before letting people bid.\\n\\n## How a Bad Actor Exploits This\\n\\n- A malicious user (the \u201cbad actor\u201d) can create or initialize an auction listing an NFT that the contract doesn\u2019t own.\\n  - For example, they specify \u201cToken ID = 123 from NFT Contract XYZ,\u201d but the auction contract never actually possessed token **123**.\\n- The contract starts accepting bids from unsuspecting bidders.\\n\\n### When the Auction Ends\\n\\n- The winning bidder expects the auction contract to transfer the NFT.\\n- The contract attempts an `nft_transfer` to the winner.\\n- But because the auction contract is not actually the owner (and was never approved), this `nft_transfer` call fails.\\n\\n### Impact on the Winning Bidder\\n\\n- The winning bidder has already paid their bid amount into the auction contract (in NEAR tokens or whatever the currency is).\\n- Now they receive no NFT in return.\\n- The contract might not have any built-in refund mechanism for a failed transfer, so the bidder could lose their funds.\\n\\n---\\n\\n# 3. Why Not Just Check On-Chain?\\n\\n## The Naive \u201cIdeal\u201d Fix\\n\\n- One straightforward solution would be:\\n  1. **Upon auction creation**, call the NFT contract (via cross-contract call) to verify that `owner_id == auction_contract` or that `auction_contract` is approved for the token.\\n  2. If the check fails, reject the auction creation.\\n\\n## Complexity of Cross-Contract Calls\\n\\n- Cross-contract calls add more complexity:\\n  - You need to handle asynchronous callbacks, error states, etc.\\n  - It increases the amount of gas usage, plus you must carefully handle reverts or partial failures.\\n  - If you\u2019re building multiple checks for different NFTs, the logic can become quite extensive.\\n\\n---\\n\\n# 4. The Interim Solution: Off-Chain Validation\\n\\n## Frontend or Off-Chain Logic\\n\\n- Instead of making the contract do the ownership verification, the developer can implement a check in their web app or server that:\\n  - Calls the NFT contract\u2019s `nft_token(token_id)` method (or an equivalent) to see who currently owns that NFT.\\n  - Validates that the current owner is actually the auction contract (or that the auction contract is at least approved to transfer the NFT).\\n\\n## Reject Invalid Auctions Before Bidding\\n\\n- If the check reveals the contract doesn\u2019t truly own or control the NFT, the frontend can prevent anyone from placing a bid.\\n- This way, legitimate users never see or bid on invalid auctions.\\n\\n## Why This Works\\n\\n- Although it\u2019s not as trustless as an on-chain check, most real-world dApps already rely heavily on the frontend for user experience.\\n- If you only show valid auctions on the user interface, you significantly reduce the chance that someone accidentally bids on a fraudulent auction.\\n\\n### Trade-Off\\n\\n- The downside is that if someone interacts with the contract directly via a CLI or another custom interface (skipping your official frontend), they could still place a bid on a fraudulent auction.\\n- However, in many dApp ecosystems, most users interact via the official UI, so off-chain checks often suffice in practice.\\n\\n---\\n\\n# 5. Recap of the Steps\\n\\n## Auction Creation\\n\\n- The malicious user calls your auction contract\u2019s `start_auction` method, claiming there\u2019s an NFT with token ID \u201c123\u201d up for sale.\\n- The contract does no checks to see if it really owns that NFT.\\n\\n## Bidding\\n\\n- Other users see the auction, place bids, and deposit funds into the contract.\\n- Everyone believes the NFT is genuinely controlled by the auction contract.\\n\\n## Auction Ends\\n\\n- The highest bidder wins.\\n- The contract attempts to do an `nft_transfer` of token \u201c123\u201d from itself to the winner.\\n\\n## Transfer Fails\\n\\n- The NFT contract says, \u201cYou\u2019re not the owner; you can\u2019t transfer.\u201d\\n- The winner gets nothing. Potentially, their funds are stuck.\\n\\n## Proposed On-Chain Fix (Complex)\\n\\n- Right when the auction is created, do a cross-contract call to the NFT contract to confirm ownership.\\n- If ownership is not confirmed, the auction creation fails.\\n\\n## Chosen Solution (For Simplicity)\\n\\n- Perform an **off-chain** ownership check in the frontend.\\n- Only display auctions that pass this verification.\\n- This prevents most users from ever bidding on a fraudulent auction.\\n\\n---\\n\\n# 6. Key Takeaways\\n\\n## Importance of Ownership Verification\\n\\n- Always confirm that the contract **actually controls** the NFT before allowing auctions or sales.\\n\\n## Security vs. Complexity\\n\\n- On-chain checks are more secure/trustless but more complex. Off-chain checks reduce complexity but rely on a trusted frontend.\\n\\n## Refunds\\n\\n- If you do rely on off-chain checks, we can consider adding a fallback mechanism in your contract that **refunds bidders if the NFT transfer fails**. That way, nobody loses funds if, somehow, an invalid auction slips through.\\n\\n## Best Practice\\n\\n- If time and resources allow, implement **both**:\\n  1. On-chain checks that prevent fraudulent auctions from even existing, and\\n  2. Off-chain checks in the UI for additional caution and user clarity.\\n\\n---\\n\\n## Final Summary\\n\\nIn short, the contract never verifies that it actually owns the NFT being auctioned, leaving a loophole for malicious auctions. Fully solving this on-chain involves writing a cross-contract call to the NFT contract to confirm ownership before starting an auction. Because cross-contract logic can be cumbersome, a simpler (though less trustless) approach is to do ownership checks off-chain (e.g., in the frontend) and only display auctions that are verifiably valid."},{"id":"block-forever","metadata":{"permalink":"/blog/block-forever","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-12-26-block-forever/index.md","source":"@site/blog/2024-12-26-block-forever/index.md","title":"Do things live in the blockchain forever?","description":"On most blockchains, including NEAR, transactions and blocks are indeed immutable. Once a transaction is finalized and added to the blockchain, it cannot be altered or deleted. This immutability ensures transparency and trust within the blockchain system.","date":"2024-12-26T00:00:00.000Z","tags":[],"readingTime":1.725,"hasTruncateMarker":false,"authors":[{"name":"Phoenix Pulsar","title":"Technomancer of Code and Connection","url":"https://github.com/phoenixpulsar","page":{"permalink":"/blog/authors/phoenixpulsar"},"socials":{"x":"https://x.com/pulsar_phoenix","github":"https://github.com/phoenixpulsar"},"imageURL":"https://github.com/phoenixpulsar.png","key":"phoenixpulsar"}],"frontMatter":{"slug":"block-forever","title":"Do things live in the blockchain forever?","authors":["phoenixpulsar"]},"unlisted":false,"prevItem":{"title":"How to check ownership of an NFT in an Auction?","permalink":"/blog/nft-auction-ownership"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"On most blockchains, including NEAR, transactions and blocks are indeed immutable. Once a transaction is finalized and added to the blockchain, it cannot be altered or deleted. This immutability ensures transparency and trust within the blockchain system.\\n\\nHowever, not all data is stored in the blockchain itself. Smart contract state\u2014the data stored by a smart contract\u2014is managed differently. While the blockchain keeps a record of transactions that update this state, the actual state itself exists as part of the account\'s storage in NEAR.\\n\\nDeleting Contract State in NEAR\\n\\nIn NEAR, it is possible to delete a contract\'s state. When this happens:\\n\\nThe state associated with the contract is removed from the account storage.\\n\\nAny funds locked in the contract\'s storage are refunded to the account owner or a designated recipient.\\n\\nThe transaction that performed the deletion remains on the blockchain as an immutable record.\\n\\nThis process is intentional and designed for flexibility. For example, developers may choose to delete a contract after it is no longer needed or to redeploy a new version of the contract. The ability to clean up unused contracts helps manage storage costs, which are incurred for storing data on NEAR.\\n\\nDoes This Mean the Blockchain Isn\u2019t Permanent?\\n\\nNo, the blockchain\u2019s core immutability remains intact. The history of all transactions, including the one that deletes the contract state, is permanently recorded. What\u2019s being \\"deleted\\" is the state data stored for that specific account, not the record of its existence or the transactions associated with it.\\n\\nThis distinction is crucial: immutability applies to the blockchain\'s ledger, not necessarily to all the data managed by smart contracts.\\n\\nKey Takeaways\\n\\nTransactions and blocks are immutable and permanently recorded on the blockchain.\\n\\nSmart contract state can be deleted, but the transaction that triggered the deletion is permanently logged.\\n\\nDeleting contract state is a practical feature for managing costs and maintaining the system\u2019s efficiency.\\n\\nUnderstanding these nuances helped me appreciate the flexibility of NEAR\'s design while recognizing the underlying permanence of blockchain records. It\u2019s a balance between immutability for trust and adaptability for real-world use cases."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-08-26-welcome/index.md","source":"@site/blog/2024-08-26-welcome/index.md","title":"Welcome","description":"Welcome to my notes on technology. In this space, I will document my learning journey into the technologies I am particularly interested in.","date":"2024-08-26T00:00:00.000Z","tags":[],"readingTime":0.565,"hasTruncateMarker":false,"authors":[{"name":"Phoenix Pulsar","title":"Technomancer of Code and Connection","url":"https://github.com/phoenixpulsar","page":{"permalink":"/blog/authors/phoenixpulsar"},"socials":{"x":"https://x.com/pulsar_phoenix","github":"https://github.com/phoenixpulsar"},"imageURL":"https://github.com/phoenixpulsar.png","key":"phoenixpulsar"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["phoenixpulsar"]},"unlisted":false,"prevItem":{"title":"Do things live in the blockchain forever?","permalink":"/blog/block-forever"}},"content":"Welcome to my notes on technology. In this space, I will document my learning journey into the technologies I am particularly interested in.\\n\\nThis serves as a personal repository, a place to bookmark concepts, put ideas into my own words, and create cheat sheets for quick reference.\\n\\nHopefully, this might also help someone else who shares an interest in these technologies.\\n\\nWe\u2019ll be diving into topics like the [NEAR blockchain](https://near.org) and developer productivity, which are currently at the top of the list.\\n\\nBut I\u2019ll definitely stay curious and wander down interesting tangents as they come up.\\n\\nFollow along as I embrace confusion, stumble through the process, and learn while building some cool stuff!"}]}}')}}]);