<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Phoenix Pulsar's Tech Journal Blog</title>
        <link>https://phoenixpulsar.github.io/blog</link>
        <description>Phoenix Pulsar's Tech Journal Blog</description>
        <lastBuildDate>Sat, 28 Dec 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[How to check ownership of an NFT in an Auction?]]></title>
            <link>https://phoenixpulsar.github.io/blog/nft-auction-ownership</link>
            <guid>https://phoenixpulsar.github.io/blog/nft-auction-ownership</guid>
            <pubDate>Sat, 28 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[In the NEAR tutorial, there is a section about ownership verification. It is just a short section, and on firts pass, it was not clear to me so below find a more detailed explanation.]]></description>
            <content:encoded><![CDATA[<p>In the NEAR tutorial, there is a section about ownership verification. It is just a short section, and on firts pass, it was not clear to me so below find a more detailed explanation.</p>
<h1>1. Context: An Auction Contract That Sells NFTs</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="auction-contract-overview">Auction Contract Overview<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#auction-contract-overview" class="hash-link" aria-label="Direct link to Auction Contract Overview" title="Direct link to Auction Contract Overview">​</a></h2>
<ul>
<li>Typically, an auction contract allows users to bid on some item (in this case, an NFT) over a set period.</li>
<li>At the end of the auction, the highest bidder wins and should receive the NFT.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="implicit-assumption">Implicit Assumption<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#implicit-assumption" class="hash-link" aria-label="Direct link to Implicit Assumption" title="Direct link to Implicit Assumption">​</a></h3>
<ul>
<li>The auction contract <strong>should</strong> have the right to transfer the NFT from itself to the winning bidder.</li>
<li>This means that, ideally, the auction contract actually owns (or controls) the NFT during the auction.</li>
</ul>
<hr>
<h1>2. The Problem: No On-Chain Check for Ownership</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-missing">What’s Missing?<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#whats-missing" class="hash-link" aria-label="Direct link to What’s Missing?" title="Direct link to What’s Missing?">​</a></h2>
<ul>
<li>In the given scenario, the contract does <strong>not</strong> verify whether it truly owns (or is approved to transfer) the NFT it’s auctioning.</li>
<li>There is no function call or logic that checks “Does this contract really own NFT X?” before letting people bid.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-a-bad-actor-exploits-this">How a Bad Actor Exploits This<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#how-a-bad-actor-exploits-this" class="hash-link" aria-label="Direct link to How a Bad Actor Exploits This" title="Direct link to How a Bad Actor Exploits This">​</a></h2>
<ul>
<li>A malicious user (the “bad actor”) can create or initialize an auction listing an NFT that the contract doesn’t own.<!-- -->
<ul>
<li>For example, they specify “Token ID = 123 from NFT Contract XYZ,” but the auction contract never actually possessed token <strong>123</strong>.</li>
</ul>
</li>
<li>The contract starts accepting bids from unsuspecting bidders.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="when-the-auction-ends">When the Auction Ends<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#when-the-auction-ends" class="hash-link" aria-label="Direct link to When the Auction Ends" title="Direct link to When the Auction Ends">​</a></h3>
<ul>
<li>The winning bidder expects the auction contract to transfer the NFT.</li>
<li>The contract attempts an <code>nft_transfer</code> to the winner.</li>
<li>But because the auction contract is not actually the owner (and was never approved), this <code>nft_transfer</code> call fails.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="impact-on-the-winning-bidder">Impact on the Winning Bidder<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#impact-on-the-winning-bidder" class="hash-link" aria-label="Direct link to Impact on the Winning Bidder" title="Direct link to Impact on the Winning Bidder">​</a></h3>
<ul>
<li>The winning bidder has already paid their bid amount into the auction contract (in NEAR tokens or whatever the currency is).</li>
<li>Now they receive no NFT in return.</li>
<li>The contract might not have any built-in refund mechanism for a failed transfer, so the bidder could lose their funds.</li>
</ul>
<hr>
<h1>3. Why Not Just Check On-Chain?</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-naive-ideal-fix">The Naive “Ideal” Fix<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#the-naive-ideal-fix" class="hash-link" aria-label="Direct link to The Naive “Ideal” Fix" title="Direct link to The Naive “Ideal” Fix">​</a></h2>
<ul>
<li>One straightforward solution would be:<!-- -->
<ol>
<li><strong>Upon auction creation</strong>, call the NFT contract (via cross-contract call) to verify that <code>owner_id == auction_contract</code> or that <code>auction_contract</code> is approved for the token.</li>
<li>If the check fails, reject the auction creation.</li>
</ol>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="complexity-of-cross-contract-calls">Complexity of Cross-Contract Calls<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#complexity-of-cross-contract-calls" class="hash-link" aria-label="Direct link to Complexity of Cross-Contract Calls" title="Direct link to Complexity of Cross-Contract Calls">​</a></h2>
<ul>
<li>Cross-contract calls add more complexity:<!-- -->
<ul>
<li>You need to handle asynchronous callbacks, error states, etc.</li>
<li>It increases the amount of gas usage, plus you must carefully handle reverts or partial failures.</li>
<li>If you’re building multiple checks for different NFTs, the logic can become quite extensive.</li>
</ul>
</li>
</ul>
<hr>
<h1>4. The Interim Solution: Off-Chain Validation</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="frontend-or-off-chain-logic">Frontend or Off-Chain Logic<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#frontend-or-off-chain-logic" class="hash-link" aria-label="Direct link to Frontend or Off-Chain Logic" title="Direct link to Frontend or Off-Chain Logic">​</a></h2>
<ul>
<li>Instead of making the contract do the ownership verification, the developer can implement a check in their web app or server that:<!-- -->
<ul>
<li>Calls the NFT contract’s <code>nft_token(token_id)</code> method (or an equivalent) to see who currently owns that NFT.</li>
<li>Validates that the current owner is actually the auction contract (or that the auction contract is at least approved to transfer the NFT).</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reject-invalid-auctions-before-bidding">Reject Invalid Auctions Before Bidding<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#reject-invalid-auctions-before-bidding" class="hash-link" aria-label="Direct link to Reject Invalid Auctions Before Bidding" title="Direct link to Reject Invalid Auctions Before Bidding">​</a></h2>
<ul>
<li>If the check reveals the contract doesn’t truly own or control the NFT, the frontend can prevent anyone from placing a bid.</li>
<li>This way, legitimate users never see or bid on invalid auctions.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-this-works">Why This Works<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#why-this-works" class="hash-link" aria-label="Direct link to Why This Works" title="Direct link to Why This Works">​</a></h2>
<ul>
<li>Although it’s not as trustless as an on-chain check, most real-world dApps already rely heavily on the frontend for user experience.</li>
<li>If you only show valid auctions on the user interface, you significantly reduce the chance that someone accidentally bids on a fraudulent auction.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="trade-off">Trade-Off<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#trade-off" class="hash-link" aria-label="Direct link to Trade-Off" title="Direct link to Trade-Off">​</a></h3>
<ul>
<li>The downside is that if someone interacts with the contract directly via a CLI or another custom interface (skipping your official frontend), they could still place a bid on a fraudulent auction.</li>
<li>However, in many dApp ecosystems, most users interact via the official UI, so off-chain checks often suffice in practice.</li>
</ul>
<hr>
<h1>5. Recap of the Steps</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="auction-creation">Auction Creation<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#auction-creation" class="hash-link" aria-label="Direct link to Auction Creation" title="Direct link to Auction Creation">​</a></h2>
<ul>
<li>The malicious user calls your auction contract’s <code>start_auction</code> method, claiming there’s an NFT with token ID “123” up for sale.</li>
<li>The contract does no checks to see if it really owns that NFT.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bidding">Bidding<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#bidding" class="hash-link" aria-label="Direct link to Bidding" title="Direct link to Bidding">​</a></h2>
<ul>
<li>Other users see the auction, place bids, and deposit funds into the contract.</li>
<li>Everyone believes the NFT is genuinely controlled by the auction contract.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="auction-ends">Auction Ends<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#auction-ends" class="hash-link" aria-label="Direct link to Auction Ends" title="Direct link to Auction Ends">​</a></h2>
<ul>
<li>The highest bidder wins.</li>
<li>The contract attempts to do an <code>nft_transfer</code> of token “123” from itself to the winner.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="transfer-fails">Transfer Fails<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#transfer-fails" class="hash-link" aria-label="Direct link to Transfer Fails" title="Direct link to Transfer Fails">​</a></h2>
<ul>
<li>The NFT contract says, “You’re not the owner; you can’t transfer.”</li>
<li>The winner gets nothing. Potentially, their funds are stuck.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="proposed-on-chain-fix-complex">Proposed On-Chain Fix (Complex)<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#proposed-on-chain-fix-complex" class="hash-link" aria-label="Direct link to Proposed On-Chain Fix (Complex)" title="Direct link to Proposed On-Chain Fix (Complex)">​</a></h2>
<ul>
<li>Right when the auction is created, do a cross-contract call to the NFT contract to confirm ownership.</li>
<li>If ownership is not confirmed, the auction creation fails.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="chosen-solution-for-simplicity">Chosen Solution (For Simplicity)<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#chosen-solution-for-simplicity" class="hash-link" aria-label="Direct link to Chosen Solution (For Simplicity)" title="Direct link to Chosen Solution (For Simplicity)">​</a></h2>
<ul>
<li>Perform an <strong>off-chain</strong> ownership check in the frontend.</li>
<li>Only display auctions that pass this verification.</li>
<li>This prevents most users from ever bidding on a fraudulent auction.</li>
</ul>
<hr>
<h1>6. Key Takeaways</h1>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="importance-of-ownership-verification">Importance of Ownership Verification<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#importance-of-ownership-verification" class="hash-link" aria-label="Direct link to Importance of Ownership Verification" title="Direct link to Importance of Ownership Verification">​</a></h2>
<ul>
<li>Always confirm that the contract <strong>actually controls</strong> the NFT before allowing auctions or sales.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="security-vs-complexity">Security vs. Complexity<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#security-vs-complexity" class="hash-link" aria-label="Direct link to Security vs. Complexity" title="Direct link to Security vs. Complexity">​</a></h2>
<ul>
<li>On-chain checks are more secure/trustless but more complex. Off-chain checks reduce complexity but rely on a trusted frontend.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="refunds">Refunds<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#refunds" class="hash-link" aria-label="Direct link to Refunds" title="Direct link to Refunds">​</a></h2>
<ul>
<li>If you do rely on off-chain checks, we can consider adding a fallback mechanism in your contract that <strong>refunds bidders if the NFT transfer fails</strong>. That way, nobody loses funds if, somehow, an invalid auction slips through.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="best-practice">Best Practice<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#best-practice" class="hash-link" aria-label="Direct link to Best Practice" title="Direct link to Best Practice">​</a></h2>
<ul>
<li>If time and resources allow, implement <strong>both</strong>:<!-- -->
<ol>
<li>On-chain checks that prevent fraudulent auctions from even existing, and</li>
<li>Off-chain checks in the UI for additional caution and user clarity.</li>
</ol>
</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="final-summary">Final Summary<a href="https://phoenixpulsar.github.io/blog/nft-auction-ownership#final-summary" class="hash-link" aria-label="Direct link to Final Summary" title="Direct link to Final Summary">​</a></h2>
<p>In short, the contract never verifies that it actually owns the NFT being auctioned, leaving a loophole for malicious auctions. Fully solving this on-chain involves writing a cross-contract call to the NFT contract to confirm ownership before starting an auction. Because cross-contract logic can be cumbersome, a simpler (though less trustless) approach is to do ownership checks off-chain (e.g., in the frontend) and only display auctions that are verifiably valid.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Do things live in the blockchain forever?]]></title>
            <link>https://phoenixpulsar.github.io/blog/block-forever</link>
            <guid>https://phoenixpulsar.github.io/blog/block-forever</guid>
            <pubDate>Thu, 26 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[On most blockchains, including NEAR, transactions and blocks are indeed immutable. Once a transaction is finalized and added to the blockchain, it cannot be altered or deleted. This immutability ensures transparency and trust within the blockchain system.]]></description>
            <content:encoded><![CDATA[<p>On most blockchains, including NEAR, transactions and blocks are indeed immutable. Once a transaction is finalized and added to the blockchain, it cannot be altered or deleted. This immutability ensures transparency and trust within the blockchain system.</p>
<p>However, not all data is stored in the blockchain itself. Smart contract state—the data stored by a smart contract—is managed differently. While the blockchain keeps a record of transactions that update this state, the actual state itself exists as part of the account's storage in NEAR.</p>
<p>Deleting Contract State in NEAR</p>
<p>In NEAR, it is possible to delete a contract's state. When this happens:</p>
<p>The state associated with the contract is removed from the account storage.</p>
<p>Any funds locked in the contract's storage are refunded to the account owner or a designated recipient.</p>
<p>The transaction that performed the deletion remains on the blockchain as an immutable record.</p>
<p>This process is intentional and designed for flexibility. For example, developers may choose to delete a contract after it is no longer needed or to redeploy a new version of the contract. The ability to clean up unused contracts helps manage storage costs, which are incurred for storing data on NEAR.</p>
<p>Does This Mean the Blockchain Isn’t Permanent?</p>
<p>No, the blockchain’s core immutability remains intact. The history of all transactions, including the one that deletes the contract state, is permanently recorded. What’s being "deleted" is the state data stored for that specific account, not the record of its existence or the transactions associated with it.</p>
<p>This distinction is crucial: immutability applies to the blockchain's ledger, not necessarily to all the data managed by smart contracts.</p>
<p>Key Takeaways</p>
<p>Transactions and blocks are immutable and permanently recorded on the blockchain.</p>
<p>Smart contract state can be deleted, but the transaction that triggered the deletion is permanently logged.</p>
<p>Deleting contract state is a practical feature for managing costs and maintaining the system’s efficiency.</p>
<p>Understanding these nuances helped me appreciate the flexibility of NEAR's design while recognizing the underlying permanence of blockchain records. It’s a balance between immutability for trust and adaptability for real-world use cases.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Welcome]]></title>
            <link>https://phoenixpulsar.github.io/blog/welcome</link>
            <guid>https://phoenixpulsar.github.io/blog/welcome</guid>
            <pubDate>Mon, 26 Aug 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Welcome to my notes on technology. In this space, I will document my learning journey into the technologies I am particularly interested in.]]></description>
            <content:encoded><![CDATA[<p>Welcome to my notes on technology. In this space, I will document my learning journey into the technologies I am particularly interested in.</p>
<p>This serves as a personal repository, a place to bookmark concepts, put ideas into my own words, and create cheat sheets for quick reference.</p>
<p>Hopefully, this might also help someone else who shares an interest in these technologies.</p>
<p>We’ll be diving into topics like the <a href="https://near.org/" target="_blank" rel="noopener noreferrer">NEAR blockchain</a> and developer productivity, which are currently at the top of the list.</p>
<p>But I’ll definitely stay curious and wander down interesting tangents as they come up.</p>
<p>Follow along as I embrace confusion, stumble through the process, and learn while building some cool stuff!</p>]]></content:encoded>
        </item>
    </channel>
</rss>